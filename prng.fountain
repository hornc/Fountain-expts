// Attempt at implementing a simple 16 bit pseudo-random number generator (PRNG)
// http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
// using a Fountain grammar.

Goal ::=
    <. seed = 0 .> "Please supply a (non-zero) seed using seed=" |
    <. seed > 0 .> (
        To16BitArray<seed,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p>
        #10
        "seed in hex is: "
        Hex<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p>
        #10
        " Xorshift:"
        Xorshift<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p>
        //ArithmeticRS9<seed>
        //To16BitArray<seed,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p>
        Hex<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p>
    )
;

To16BitArray<val,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::=
    <. a = val .> Lsb<a>
    Div2<val>
    <. b = val .> Lsb<b>
    Div2<val>
    <. c = val .> Lsb<c>
    Div2<val>
    <. d = val .> Lsb<d>
    Div2<val>
    <. e = val .> Lsb<e>
    Div2<val>
    <. f = val .> Lsb<f>
    Div2<val>
    <. g = val .> Lsb<g>
    Div2<val>
    <. h = val .> Lsb<h>
    Div2<val>
    <. i = val .> Lsb<i>
    Div2<val>
    <. j = val .> Lsb<j>
    Div2<val>
    <. k = val .> Lsb<k>
    Div2<val>
    <. l = val .> Lsb<l>
    Div2<val>
    <. m = val .> Lsb<m>
    Div2<val>
    <. n = val .> Lsb<n>
    Div2<val>
    <. o = val .> Lsb<o>
    Div2<val>
    <. p = val .> Lsb<p>
;


// Divide a by 2, result is an int
Div2<a> ::=
    <. a = 0 .> ""
  | <. a > 0 .> <. b = a .> { "" <. b -= 2 .> <. a -= 1 .> } <. b < 1 .>
;


// Mult a by 2
Mul2<a> ::= <. a += a .> "";


// Return least significant bit of a (result overwrites a)
Lsb<a> ::=
    <. a = 0 .> ""
  | <. a = 1 .> ""
  | <. a > 1 .> <. c = a .> Div2<c> Mul2<c> <. a -= c .>
;


Xorshift<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::=
    Copy16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    LS7<aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    Xor16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>

    Copy16B<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    RS9<aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    Xor16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>

    Copy16B<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    LS8<aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
    Xor16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp>
;


// Copies a 16 bit array.
Copy16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp> ::=
    <. aa = a .><. bb = b .><. cc = c .><. dd = d .><. ee = e .><. ff = f .><. gg = g .><. hh = h .><. ii = i .><. jj = j .><. kk = k .><. ll = l .><. mm = m .><. nn = n .><. oo = o .><. pp = p .>
;


// Copies over an existing 1b bit array.
Copy16B<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp> ::=
    <. aa -= aa .> <. aa += a .>
    <. bb -= bb .> <. bb += b .>
    <. cc -= cc .> <. cc += c .>
    <. dd -= dd .> <. dd += d .>
    <. ee -= ee .> <. ee += e .>
    <. ff -= ff .> <. ff += f .>
    <. gg -= gg .> <. gg += g .>
    <. hh -= hh .> <. hh += h .>
    <. ii -= ii .> <. ii += i .>
    <. jj -= jj .> <. jj += j .>
    <. kk -= kk .> <. kk += k .>
    <. ll -= ll .> <. ll += l .>
    <. mm -= mm .> <. mm += m .>
    <. nn -= nn .> <. nn += n .>
    <. oo -= oo .> <. oo += o .>
    <. pp -= pp .> <. pp += p .>
;


Xor<a, b> ::=
    <. a = 1 .> <. b = 1 .> "" <. a -= 1 .>
    | <. a = 1 .> <. b = 0 .> ""
    | <. a = 0 .> <. b = 1 .> "" <. a += 1 .>
    | <. a = 0 .> <. b = 0 .> ""
;


Xor16<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp> ::=
    Xor<a, aa>
    Xor<b, bb>
    Xor<c, cc>
    Xor<d, dd>
    Xor<e, ee>
    Xor<f, ff>
    Xor<g, gg>
    Xor<h, hh>
    Xor<i, ii>
    Xor<j, jj>
    Xor<k, kk>
    Xor<l, ll>
    Xor<m, mm>
    Xor<n, nn>
    Xor<o, oo>
    Xor<p, pp>
;


// Iterated left and right bit-shifts.
LS7<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::= <. repeat = 0 .> { LS<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> <. repeat += 1 .> } <. repeat > 6 .>;
RS9<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::= <. repeat = 0 .> { RS<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> <. repeat += 1 .> } <. repeat > 8 .>;
LS8<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::= <. repeat = 0 .> { LS<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> <. repeat += 1 .> } <. repeat > 7 .>;


// Arithmetic versions of the above, using a single int variable. (appear to be slower)
ArithmeticLS7<x> ::= <. repeat = 0 .> { Mul2<x> <. repeat += 1 .> } <. repeat > 6 .>;
ArithmeticRS9<x> ::= <. repeat = 0 .> { Div2<x> <. repeat += 1 .> } <. repeat > 8 .>;
ArithmeticLS8<x> ::= <. repeat = 0 .> { Mul2<x> <. repeat += 1 .> } <. repeat > 7 .>;


// Right-shift a 16 bit array by one.
RS<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::=
( <. && a = 1, b = 0 .> "" <. a -= 1 .>
| <. && a = 0, b = 1 .> "" <. a += 1 .>
| <. && a = 0, b = 0 .> ""
| <. && a = 1, b = 1 .> "" )
( <. && b = 1, c = 0 .> "" <. b -= 1 .>
| <. && b = 0, c = 1 .> "" <. b += 1 .>
| <. && b = 0, c = 0 .> ""
| <. && b = 1, c = 1 .> "" )
( <. && c = 1, d = 0 .> "" <. c -= 1 .>
| <. && c = 0, d = 1 .> "" <. c += 1 .>
| <. && c = 0, d = 0 .> ""
| <. && c = 1, d = 1 .> "" )
( <. && d = 1, e = 0 .> "" <. d -= 1 .>
| <. && d = 0, e = 1 .> "" <. d += 1 .>
| <. && d = 0, e = 0 .> ""
| <. && d = 1, e = 1 .> "" )
( <. && e = 1, f = 0 .> "" <. e -= 1 .>
| <. && e = 0, f = 1 .> "" <. e += 1 .>
| <. && e = 0, f = 0 .> ""
| <. && e = 1, f = 1 .> "" )
( <. && f = 1, g = 0 .> "" <. f -= 1 .>
| <. && f = 0, g = 1 .> "" <. f += 1 .>
| <. && f = 0, g = 0 .> ""
| <. && f = 1, g = 1 .> "" )
( <. && g = 1, h = 0 .> "" <. g -= 1 .>
| <. && g = 0, h = 1 .> "" <. g += 1 .>
| <. && g = 0, h = 0 .> ""
| <. && g = 1, h = 1 .> "" )
( <. && h = 1, i = 0 .> "" <. h -= 1 .>
| <. && h = 0, i = 1 .> "" <. h += 1 .>
| <. && h = 0, i = 0 .> ""
| <. && h = 1, i = 1 .> "" )
( <. && i = 1, j = 0 .> "" <. i -= 1 .>
| <. && i = 0, j = 1 .> "" <. i += 1 .>
| <. && i = 0, j = 0 .> ""
| <. && i = 1, j = 1 .> "" )
( <. && j = 1, k = 0 .> "" <. j -= 1 .>
| <. && j = 0, k = 1 .> "" <. j += 1 .>
| <. && j = 0, k = 0 .> ""
| <. && j = 1, k = 1 .> "" )
( <. && k = 1, l = 0 .> "" <. k -= 1 .>
| <. && k = 0, l = 1 .> "" <. k += 1 .>
| <. && k = 0, l = 0 .> ""
| <. && k = 1, l = 1 .> "" )
( <. && l = 1, m = 0 .> "" <. l -= 1 .>
| <. && l = 0, m = 1 .> "" <. l += 1 .>
| <. && l = 0, m = 0 .> ""
| <. && l = 1, m = 1 .> "" )
( <. && m = 1, n = 0 .> "" <. m -= 1 .>
| <. && m = 0, n = 1 .> "" <. m += 1 .>
| <. && m = 0, n = 0 .> ""
| <. && m = 1, n = 1 .> "" )
( <. && n = 1, o = 0 .> "" <. n -= 1 .>
| <. && n = 0, o = 1 .> "" <. n += 1 .>
| <. && n = 0, o = 0 .> ""
| <. && n = 1, o = 1 .> "" )
( <. && o = 1, p = 0 .> "" <. o -= 1 .>
| <. && o = 0, p = 1 .> "" <. o += 1 .>
| <. && o = 0, p = 0 .> ""
| <. && o = 1, p = 1 .> "" )
( <. p = 1 .> "" <. p -= 1 .>
| <. p = 0 .> "")
;


// Left-shift a 16 bit array by one.
LS<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::=
( <. && p = 1, o = 0 .> "" <. p -= 1 .>
| <. && p = 0, o = 1 .> "" <. p += 1 .>
| <. && p = 0, o = 0 .> ""
| <. && p = 1, o = 1 .> "" )
( <. && o = 1, n = 0 .> "" <. o -= 1 .>
| <. && o = 0, n = 1 .> "" <. o += 1 .>
| <. && o = 0, n = 0 .> ""
| <. && o = 1, n = 1 .> "" )
( <. && n = 1, m = 0 .> "" <. n -= 1 .>
| <. && n = 0, m = 1 .> "" <. n += 1 .>
| <. && n = 0, m = 0 .> ""
| <. && n = 1, m = 1 .> "" )
( <. && m = 1, l = 0 .> "" <. m -= 1 .>
| <. && m = 0, l = 1 .> "" <. m += 1 .>
| <. && m = 0, l = 0 .> ""
| <. && m = 1, l = 1 .> "" )
( <. && l = 1, k = 0 .> "" <. l -= 1 .>
| <. && l = 0, k = 1 .> "" <. l += 1 .>
| <. && l = 0, k = 0 .> ""
| <. && l = 1, k = 1 .> "" )
( <. && k = 1, j = 0 .> "" <. k -= 1 .>
| <. && k = 0, j = 1 .> "" <. k += 1 .>
| <. && k = 0, j = 0 .> ""
| <. && k = 1, j = 1 .> "" )
( <. && j = 1, i = 0 .> "" <. j -= 1 .>
| <. && j = 0, i = 1 .> "" <. j += 1 .>
| <. && j = 0, i = 0 .> ""
| <. && j = 1, i = 1 .> "" )
( <. && i = 1, h = 0 .> "" <. i -= 1 .>
| <. && i = 0, h = 1 .> "" <. i += 1 .>
| <. && i = 0, h = 0 .> ""
| <. && i = 1, h = 1 .> "" )
( <. && h = 1, g = 0 .> "" <. h -= 1 .>
| <. && h = 0, g = 1 .> "" <. h += 1 .>
| <. && h = 0, g = 0 .> ""
| <. && h = 1, g = 1 .> "" )
( <. && g = 1, f = 0 .> "" <. g -= 1 .>
| <. && g = 0, f = 1 .> "" <. g += 1 .>
| <. && g = 0, f = 0 .> ""
| <. && g = 1, f = 1 .> "" )
( <. && f = 1, e = 0 .> "" <. f -= 1 .>
| <. && f = 0, e = 1 .> "" <. f += 1 .>
| <. && f = 0, e = 0 .> ""
| <. && f = 1, e = 1 .> "" )
( <. && e = 1, d = 0 .> "" <. e -= 1 .>
| <. && e = 0, d = 1 .> "" <. e += 1 .>
| <. && e = 0, d = 0 .> ""
| <. && e = 1, d = 1 .> "" )
( <. && d = 1, c = 0 .> "" <. d -= 1 .>
| <. && d = 0, c = 1 .> "" <. d += 1 .>
| <. && d = 0, c = 0 .> ""
| <. && d = 1, c = 1 .> "" )
( <. && c = 1, b = 0 .> "" <. c -= 1 .>
| <. && c = 0, b = 1 .> "" <. c += 1 .>
| <. && c = 0, b = 0 .> ""
| <. && c = 1, b = 1 .> "" )
( <. && b = 1, a = 0 .> "" <. b -= 1 .>
| <. && b = 0, a = 1 .> "" <. b += 1 .>
| <. && b = 0, a = 0 .> ""
| <. && b = 1, a = 1 .> "" )
( <. a = 1 .> "" <. a -= 1 .>
| <. a = 0 .> "" )
;


Hex<a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p> ::=
    "0x" Nibble<m,n,o,p> Nibble<i,j,k,l> Nibble<e,f,g,h> Nibble<a,b,c,d>
;


Nibble<a,b,c,d> ::=
 <. a = 0 .> <. b = 0 .> <. c = 0 .> <. d = 0 .> "0" |
 <. a = 1 .> <. b = 0 .> <. c = 0 .> <. d = 0 .> "1" |
 <. a = 0 .> <. b = 1 .> <. c = 0 .> <. d = 0 .> "2" |
 <. a = 1 .> <. b = 1 .> <. c = 0 .> <. d = 0 .> "3" |
 <. a = 0 .> <. b = 0 .> <. c = 1 .> <. d = 0 .> "4" |
 <. a = 1 .> <. b = 0 .> <. c = 1 .> <. d = 0 .> "5" |
 <. a = 0 .> <. b = 1 .> <. c = 1 .> <. d = 0 .> "6" |
 <. a = 1 .> <. b = 1 .> <. c = 1 .> <. d = 0 .> "7" |
 <. a = 0 .> <. b = 0 .> <. c = 0 .> <. d = 1 .> "8" |
 <. a = 1 .> <. b = 0 .> <. c = 0 .> <. d = 1 .> "9" |
 <. a = 0 .> <. b = 1 .> <. c = 0 .> <. d = 1 .> "A" |
 <. a = 1 .> <. b = 1 .> <. c = 0 .> <. d = 1 .> "B" |
 <. a = 0 .> <. b = 0 .> <. c = 1 .> <. d = 1 .> "C" |
 <. a = 1 .> <. b = 0 .> <. c = 1 .> <. d = 1 .> "D" |
 <. a = 0 .> <. b = 1 .> <. c = 1 .> <. d = 1 .> "E" |
 <. a = 1 .> <. b = 1 .> <. c = 1 .> <. d = 1 .> "F" ;

